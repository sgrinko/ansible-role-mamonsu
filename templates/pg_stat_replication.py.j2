{% raw %}
# -*- coding: utf-8 -*-

from mamonsu.plugins.pgsql.plugin import PgsqlPlugin as Plugin
from mamonsu.plugins.pgsql.pool import Pooler


class PgStatReplication(Plugin):
    query = "select {0} from public.mamonsu_pg_stat_replication();"
    AgentPluginType = 'pg'
    key = "pgsql."
    # zbx_key, sql, desc, unit, delta, (Graph, color, side)
    Items = [
        ('stat[write_lag]',
         'write_lag',
         'write lag time', Plugin.UNITS.s, Plugin.DELTA.as_is,
         ('PostgreSQL lag: write time', 'BBBB00', 0)),
        ('stat[flush_lag]',
         'flush_lag',
         'flush lag time', Plugin.UNITS.s, Plugin.DELTA.as_is,
         ('PostgreSQL lag: flush time', '00CC00', 0)),
        ('stat[replay_lag]',
         'replay_lag',
         'replay lag time', Plugin.UNITS.s, Plugin.DELTA.as_is,
         ('PostgreSQL lag: replay time', '0000CC', 0))
    ]

    def run(self, zbx):
        params = [x[1] for x in self.Items]
        result = Pooler.query(self.query.format(', '.join(params)))
        idx_repl=0
        for row in result:
            idx_repl=idx_repl+1
            for idx, val in enumerate(row):
                key, val = 'pgsql.standby{1}.{0}'.format(self.Items[idx][0], idx_repl), val
                zbx.send(key, float(val), self.Items[idx][4])

    def items(self, template):
        result = ''
        delta = Plugin.DELTA.as_is
        for item in self.Items:
            # split each item to get values for keys of both agent type and mamonsu type
            keys = item[0].split('[')
            result += template.item({
                'key': self.right_type(self.key + 'standby1.' + keys[0] + '{0}', keys[1][:-1]) ,
                'name': 'PostgreSQL lag: {0}'.format(item[2]) + ' standby1',
                'value_type': self.VALUE_TYPE.numeric_float,
                'units': item[3],
                'delay': self.plugin_config('interval'),
                'delta': delta})
            result += template.item({
                'key': self.right_type(self.key + 'standby2.' + keys[0] + '{0}', keys[1][:-1]),
                'name': 'PostgreSQL lag: {0}'.format(item[2]) + ' standby2',
                'value_type': self.VALUE_TYPE.numeric_float,
                'units': item[3],
                'delay': self.plugin_config('interval'),
                'delta': delta})
        return result

    def graphs(self, template):
        all_graphs = [
            ('PostgreSQL lag: time standby1', None),
            ('PostgreSQL lag: time standby2', None)]
        result = ''
        idx_repl=0
        for graph_item in all_graphs:
            items = []
            idx_repl=idx_repl+1
            for item in self.Items:
                keys = item[0].split('[')
                items.append({
                    'key': self.right_type(self.key +'standby{0}.'.format(idx_repl) + keys[0] + '{0}', keys[1][:-1]),
                    'color': item[5][1],
                    'yaxisside': item[5][2]})
            # create graph
            graph = {'name': graph_item[0], 'items': items}
            if graph_item[1] is not None:
                graph['type'] = graph_item[1]
            result += template.graph(graph)
        return result

    def keys_and_queries(self, template_zabbix):
        result = []
        for i, item in enumerate(self.Items):
            keys = item[0].split('[')
            result.append('{0}[*],$2 $1 -c "{1}"'.format('{0}standby1.{1}.{2}'.format(self.key, keys[0], keys[1][:-1]), self.query.format(item[1])))
        for i, item in enumerate(self.Items):
            keys = item[0].split('[')
            result.append('{0}[*],$2 $1 -c "{1}"'.format('{0}standby2.{1}.{2}'.format(self.key, keys[0], keys[1][:-1]), self.query.format(item[1])))
        return template_zabbix.key_and_query(result)
{% endraw %}
